import pickle
import numpy as np
import feature_extraction as fe

""" source : https://www.census.gov/quickfacts/fact/table/alleghenycountypennsylvania/PST045216 """
CURR_YEAR = 2015
# gender
FEMALE_PERCENT = 0.517 # 4327
# MALE = 0.483 # 3134
# age
# BELOW_18 = 0.189 # 0
OVER_65 = 0.18 # 4353
# OTHER = 0.631 # 3108
# ===>>>>
OTHER = 0.82
# race
WHITE = 0.805 # 3184
ASIAN = 0.037 # 1244
BLACK = 0.134 # 2294
# OTHER = 0.024 # 739

def draw_general_sample(num_samples, modified_patient_data):
    # load data from the pickle file generated by match_data
    # pkl_file = open(fe.pickle_file_name, 'rb')
    # opioid_data_, modified_patient_data, opioid_data = pickle.load(pkl_file)
    # pkl_file.close()
    # print(len(modified_patient_data))
    # check if num_samples is reasonable
    if num_samples > len(modified_patient_data):
        print('data points collected fewer than required!')
        return None
    # draw samples
    # gender -> age (<18, 18~65, >65) -> race (white, asian, other)
    # group patient data
    female_need = int(num_samples * FEMALE_PERCENT)
    male_need = int(num_samples * (1 - FEMALE_PERCENT)) 
    female_group, male_group = _split_gender(modified_patient_data)
    # get id
    fp_id = np.random.choice(list(female_group.keys()), female_need)
    mp_id = np.random.choice(list(male_group.keys()), female_need)
    # get sample
    sample_chosen = {k : v for k, v in modified_patient_data.iteritems() if k in fp_id or k in mp_id}
    # print(len(sample_chosen))
    _add_age(sample_chosen)
    return sample_chosen

    # print(len(female_group))
    # print(len(male_group))
    # young, adult, elder = _split_age(modified_patient_data)
    # print(len(young))
    # print(len(adult))
    # print(len(elder))
    # white, black, asian, other = _split_race(modified_patient_data)
    # print(len(white))
    # print(len(black))
    # print(len(asian))
    # print(len(other))

def _add_age(modified_patient_data):
    for pid in modified_patient_data:
        data = modified_patient_data[pid]
        birth_year = int(data['dob'].split('-')[0])
        data['age'] = int(CURR_YEAR - birth_year)

def _split_gender(modified_patient_data):
    female_group = {}
    male_group = {}
    for pid in modified_patient_data:
        data = modified_patient_data[pid]
        if data['gender'].lower() == 'female':
            female_group[pid] = data
        elif data['gender'].lower() == 'male':
            male_group[pid] = data
        elif np.random.randint(2): # Unknown case
            female_group[pid] = data
        else:
            male_group[pid] = data
    return female_group, male_group

def _split_age(single_group):
    young = {}
    adult = {}
    elder = {}
    for pid in single_group:
        data = single_group[pid]
        birth_year = int(data['dob'].split('-')[0])
        if CURR_YEAR - birth_year < 18:
            young[pid] = data
        elif CURR_YEAR - birth_year > 65:
            elder[pid] = data
        else:
            adult[pid] = data
    return young, adult, elder

def _split_race(single_group):
    white = {}
    black = {}
    asian = {}
    other = {}
    for pid in single_group:
        data = single_group[pid]
        if data['race'].lower() == 'white':
            white[pid] = data
        elif data['race'].lower() == 'black':
            black[pid] = data
        elif data['race'].lower() == 'asian':
            asian[pid] = data
        else:
            other[pid] = data
    return white, black, asian, other

if __name__ == "__main__":
    draw_general_sample(2000)





